#################################
# Common
#################################

snippet fun "function"
function ${1:name}(${2:params}) {
	${0:${VISUAL}}
}
endsnippet

snippet afun "Async function"
async function ${1:name}(${2:params}) {
	${0:${VISUAL}}
}
endsnippet

snippet constf "Arrow function"
const ${1:name} = (${2:params}) => {
	${0:${VISUAL}}
}
endsnippet

snippet => "lambda" i
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet jsdoc "Doc comment"
/**
	* ${0:description}
	*/
endsnippet



snippet for "For loop"
for (let ${1:i} = 0; $1 < ${2:array}.length; $1++) {
	const ${3:item} = $2[$1];
	${0:${VISUAL}}
}
endsnippet

snippet foreach "For-Each Loop"
${1:array}.forEach(${2:item} => {
	${0:${VISUAL}}
});
endsnippet

snippet forof "For-Of Loop"
for (const ${1:element} of ${2:iterable}) {
	${0:${VISUAL}}
}
endsnippet

snippet if "If Statement"
if (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet

snippet ifelse "If-Else Statement"
if (${1:condition}) {
	${2:${VISUAL}}
} else {
	$0
}
endsnippet

snippet ttodo "Throw todo"
// TODO: ${1}
throw new Error('TODO: $1')$0
endsnippet

snippet cl "Console log"
console.log(${0:${VISUAL}})
endsnippet

snippet cln "Console log"
console.log("$1", ${1:${VISUAL}})
endsnippet

snippet cls "Console stringifiy"
console.log('${1:${VISUAL}} = ', JSON.stringify($1, null, 5))
endsnippet

snippet jsonstr "JSON.stringify" i
JSON.stringify(${1:${VISUAL}})
endsnippet

snippet logi "Log info"
logger.info(`${1}`)
endsnippet

snippet switchf "Flow switch"
switch (${1}) {
	case '${2}':
	default: {
		// eslint-disable-next-line no-unused-vars
		const typeCheck: '${3}' = $1;
	}
}
endsnippet

snippet switche "Exhaustive switch"
switch (${1}) {
	case '${2}':
	default:
		return assertNever($1)
}
endsnippet

snippet eslintnl "eslint-disable-next-line"
// eslint-disable-next-line $0
endsnippet

snippet < "XML tag"
<${1:tag}>
	${0:${VISUAL}}
</$1>
endsnippet

snippet consto "Destructure object"
const { ${2} } = ${1}
endsnippet

snippet consta "Destructure array"
const [${2}] = ${1}
endsnippet


#################################
# Testing
#################################

snippet desc "Describe test"
describe('${1}', () => {
	test('${2}', () => {
		${0}
	})
})
endsnippet

snippet givenwhen "Given When Then"
// given
${1}
// when
${2}
// then
${0}
endsnippet

snippet test "Test case"
test('${1:description}', () => {
	$0
})
endsnippet


#################################
# import/export
#################################

snippet im "Import default"
import ${1} from '${0:$1}'
endsnippet

snippet imm "Import destructuring"
import { ${0} } from '${1}'
endsnippet

snippet re "Require module"
const ${1} = require('${2:$1}')
endsnippet

snippet dre "Destructure require"
const { $0 } = require('${1}')
endsnippet

snippet ed "Export default"
export default ${0}
endsnippet


#################################
# React
#################################



snippet rconst "React component"
type Props = {
	$2
}
export const ${1:Name}: FC<Props> = props => {
	return ${0:${VISUAL}}
}
endsnippet

snippet usecontext"Use context"
const context = React.useContext(${1:context})
if (context === undefined) {
	throw new Error('${2:custom hook name} must be used within a $1 provider')
}
endsnippet


snippet usestate "useState"
const [$1, set${1/.+/\u$0/}] = useState(${2:initialState})
endsnippet

snippet usereducer "useReducer"
const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState})
endsnippet


#################################
# Coding challenges stuff
#################################
# Maybe move it somewhere else

snippet distinctfun
function distinct(array) {
	return [...new Set(array)];
}
endsnippet

snippet rangefun
function range(sizeOrStart, end) {
	if (end === undefined) {
		const size = sizeOrStart;
		return [...Array(size).keys()];
	} else {
		const start = sizeOrStart;
		return [...Array(end - start).keys()].map(i => i + start);
	}
}
endsnippet

snippet addfun
function add(a, b) {
	return a + b;
}
endsnippet


snippet groupByfun
function groupBy(f, list) {
	return list.reduce((acc, x) => {
		const s = f(x)
		acc[s] = (acc[s] || [])
		acc[s].push(x)
		return acc
	}, {})
}
endsnippet


snippet defaultdictfun
const defaultDict = (d = {}) =>
	new Proxy(d, {
		get: (obj, prop) => (prop in obj ? obj[prop] : 0)
	});
endsnippet


#################################
# Talk snippets
#################################

snippet expectequal
expect(${1}).toEqual(${0})
endsnippet

snippet periodo
{ from: ${1}, to: ${2} }
endsnippet

snippet givenperiod "period"
// Given
const period = { from: ${1}, to: ${2} }
// when
const periods = splitPeriod(period)
// then
expect(periods).toEqual([${3}])
endsnippet

snippet test1
test('should not split when the period is 1-12', () => {
	${0}
})

endsnippet

snippet test2
test('should not split when the period is between 1-12', () => {
	${0}
})

endsnippet

snippet test3
test('should not split when the period is between 13-24', () => {
	${0}
})

endsnippet

snippet test4
test('should split in 2 when the period is 6-13', () => {
	// 1          12        24       absMonth
	// |----------|----------|-----
	//      |------|                 initial period
	//      6      13
	${0}
})

endsnippet

snippet test5
test('should split in 2 when the period is 12-13', () => {
	${0}
})

endsnippet

snippet test6
test('should split in 3 when the period is 6-25', () => {
	//  1          12        24       absMonth
	//  |----------|----------|-----
	//       |-----------------|      initial period
	//       6                25

	const period = { from: 6, to: 25 }
	// when
	const periods = splitPeriod(period, 'annually')
	// then
	expect(periods).toEqual([
		{ from: 6, to: 12 },
		{ from: 13, to: 24 },
		{ from: 25, to: 25 },
	])
})

endsnippet


