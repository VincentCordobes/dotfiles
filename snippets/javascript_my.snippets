snippet fun
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet afun
async function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet c=>
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet


snippet //*
/**
 * ${0:description}
 *
 */
endsnippet

snippet ed
export default ${0}
endsnippet


snippet desc 
describe('${1}', () => {
	test('${2}', () => {
		${3}
	})
})
endsnippet

snippet givenwhen
// given
${1}
// when
${2}
// then
${3}
endsnippet

snippet it "it (js)"
it('${1:description}', () => {
	$0
});
endsnippet


snippet ttodo 
throw new Error('TODO: ${1}')
endsnippet

snippet cls 
console.log('${1} = ', JSON.stringify(${2:$1}, null, 5))
endsnippet

snippet cl 
console.log(${0})
endsnippet
    

snippet switchf 
switch (${1}) {
	case '${2}':
	default: {
		// eslint-disable-next-line no-unused-vars
		const typeCheck: '${3}' = $1;
	}
}
endsnippet


snippet eslintnl
// eslint-disable-next-line $1
endsnippet



#######################################"
# React stuff
#######################################"

snippet <t
<${1:}>
	${2}
</$1>
endsnippet

snippet im
import ${1} from '${2:$1}'
endsnippet

snippet imm
import { ${1} } from '${2}'
endsnippet


snippet rcon
constructor(props) {
	super(props)

	this.state = {
		${1}: ${0},
	}
}
endsnippet

snippet rcc
class ${1:ClassName} extends React.Component {
	render() {
		return (
			${0:<div />}
		)
	}
}
endsnippet

snippet ren
render() {
	return (
		${1:<div />}
	)
}
endsnippet
